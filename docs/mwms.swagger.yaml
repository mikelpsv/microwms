openapi: 3.0.0
info:
  title: "MicroWMS service"
  description:  ""
  version: "1.1"
security:
  - ApiKeyAuth: []
  
servers:
  - url: microwms.ru/api/v1.0
    description: ""
    
tags:
- name: "Общие методы"
- name: "Склады"
- name: "Товары"
- name: "Производители"
- name: "Штрих-коды"
- name: "Пользователи"
- name: "Поступление товара"

paths:
  /ping:
    get:
      tags:
        - "Общие методы"
      summary: проверкa активности сервиса
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ping'

  /warehouses:
    get:
      tags:
        - "Склады"
      summary: 'gets a list of warehouses'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseList' 
    post:
      tags:
        - "Склады"
      summary: 'creates a warehouse element'
      description: 'identifier, in body data structure will be ignored'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseItem'
      responses:
        200:
          description: OK 
          content:
            application/json:
              schema:
                type: integer
                description: 'identifier of the created warehouse'
                example: 3
        400:
          description: 'invalid input data'
    put:
      tags:
        - "Склады"
      summary: 'updates a warehouse element'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WarehouseItem'
      responses:
        200:
          description: OK 
          content:
            application/json:
              schema:
                type: integer
                description: 'changed warehouse identifier'
                example: 3
        400:
          description: 'invalid input data'                  
  /warehouses/{id}:
    get:
      tags:
        - "Склады"
      summary: 'gets a warehouse object by its ID'
      parameters:
        - name: id
          in: path
          required: true
          description: 'warehouse id'
          schema:
            type: integer        
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WarehouseItem'    
    delete:
      tags:
        - "Склады"
      summary: 'deletes a warehouse element by its id'
      parameters:
        - name: id
          in: path
          required: true
          description: 'warehouse id'
          schema:
            type: integer        
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: integer
                description: 'the number of items removed. the count can be 0 if the database architecture does not allow data integrity to be compromised'
  /products:
    get:
      tags:
        - "Товары"
      summary: 'gets a list of products'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfuctsList'   
    post:
      tags: 
        - "Товары"
      summary: 'creates a product element'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductItem"      
      responses:
        200:
          description: OK   
          content:
            application/json:
              schema:
                type: integer
                description: 'identifier of the created product'
                example: 3 
    put:
      tags: 
        - "Товары"
      summary: 'updates a product element'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductItem"
      responses:
        200:
          description: OK 
          content:
            application/json:
              schema:
                type: integer
                description: 'changed product identifier'
                example: 3
        400:
          description: 'invalid input data'
  /products/{id}:
    get:
      tags:
        - "Товары"
      summary: 'gets a product element by its id'
      parameters:
        - name: id
          in: path
          required: true
          description: 'product id'
          schema:
            type: integer          
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductItem'   
        404:
          description: товар не найден
    delete:
      tags:
        - "Товары"
      summary: 'deletes a product element by its id'
      parameters:
        - name: id
          in: path
          required: true
          description: 'product id'
          schema:
            type: integer        
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: integer
                description: 'the number of items removed. the count can be 0 if the database architecture does not allow data integrity to be compromised'
  /products/barcode/{barcode}:
    get:
      tags:
        - "Товары"
      summary: 'find products by barcode'
      parameters:
        - name: barcode
          in: path
          required: true
          description: 'barcode'
          schema:
            type: string          
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ProductListItem'   
  /manufacturers:
    get:
      tags:
        - "Производители"
      summary: 'gets a list of manufacturers'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ManufacturerItem'  
    post:
      tags:
        - "Производители"
      summary: 'creates a manufacturer element'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ManufacturerItem"      
      responses:
        200:
          description: OK   
          content:
            application/json:
              schema:
                type: integer
                description: 'identifier of the created manufacturer'
                example: 3               
    put:
      tags:
        - "Производители"
      summary: 'updates a manufacturer element'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ManufacturerItem"      
      responses:
        200:
          description: OK 
          content:
            application/json:
              schema:
                type: integer
                description: 'changed manufacturer identifier'
                example: 3
        400:
          description: 'invalid input data' 
  /manufacturers/{id}:
    get:
      tags:
        - "Производители"
      summary: 'gets a manufacturer element by its id'
      parameters:
        - name: id
          in: path
          required: true
          description: 'manufacturer id'
          schema:
            type: integer          
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ManufacturerItem'   
        404:
          description: производитель не найден
    delete:
      tags:
        - "Производители"
      summary: 'deletes a manufacturer element by its id'
      parameters:
        - name: id
          in: path
          required: true
          description: 'manufacturer id'
          schema:
            type: integer        
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: integer                  
        404:
          description: производитель не найден
  /suggestion/{catalog_name}/{text}:
    get:
      tags:
        - "Общие методы"
      summary: 'gets suggestions from the given catalog'
      parameters:
        - name: catalog_name
          in: path
          required: true
          description: 'catalog name'
          schema:
            type: string
        - name: text
          in: path
          required: true
          description: 'search text'
          schema:
            type: string 
            
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SuggestionItem'   
  
  /receipt:
    get:
      tags:
        - "Поступление товара"
      summary: 'gets a list of receipt docs'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReceiptDocsist' 
        
components:
  schemas:
    Ping:
      type: object
      description: ответ на пинг
      properties:
        code: 
          type: integer
          example: "200"
        description: 
          type: string
          example: ""          
        version:
          type: string
          description: актуальная версия, рекомендуемая к использованию
          example: "v1.1"

    ListHeader:
      type: object
      description: 'common list header'
      properties:
        limit:
          type: integer
          description: 'number of records in the result'
        offset:
          type: integer
          description: 'offset of the resulting set relative to the full data sample'
        count:
          type: integer
          description: 'number of records in the complete dataset'
  
    # warehouses
    WarehouseListItem:
      type: object
      description: 'warehouse list item'
      properties:
        id:
          type: integer
          example: 221
          description: 'warehouse id'
        name:
          type: string
          example: "my whs"
          description: 'warehouse name'
        address:
          type: string
          description: 'warehouse address, optional, for example: street, city'
    WarehouseList:
      type: object
      description: 'warehouse list'
      properties:
        header:
          $ref: '#/components/schemas/ListHeader'
        data:
          type: array
          items:
            $ref: '#/components/schemas/WarehouseListItem'
    WarehouseItem:
      type: object
      description: 'warehouse item as object'
      properties:
        id:
          type: integer
          example: 221
          description: 'warehouse id'
        name:
          type: string
          example: "my whs"
          description: 'warehouse name'
        address:
          type: string
          description: 'warehouse address, optional, for example: street, city'
        acceptance_zone:
          $ref: '#/components/schemas/ZoneItem'
        shipping_zone:
          $ref: '#/components/schemas/ZoneItem'
        storage_zones:
          type: array
          items:
            $ref: '#/components/schemas/ZoneItem'

    ZoneItem:
      type: object
      description: 'zone item'
      properties:
        id:
          type: integer
          description: 'zone id'
        name:
          type: string
          description: 'zone name'
        zone_type:
          type: integer
          description: 'zone type'
       
    # products      
    ProductListItem:
      type: object
      description: 'product list item'
      properties:
        id:
          type: integer 
          description: 'product id'
        name:
          type: string
          description: 'product_name'
        item_number: 
          type: string
          description: 'product number (vendor code)'
        manufacturer:
          $ref: '#/components/schemas/ManufacturerItem'
        barcodes:
          type: array
          description: 'product barcodes'
          items:
            $ref: '#/components/schemas/BarcodeItem'
    ProfuctsList:
      type: object
      properties:
        header: 
          $ref: '#/components/schemas/ListHeader'
        data:
          type: array
          items:
              $ref: '#/components/schemas/ProductListItem'
    ProductItem:
      type: object
      description: 'product item as object'
      properties:
        id:
          type: integer 
          description: 'product id'
        name:
          type: string
          description: 'product name'
        manufacturer:
          $ref: '#/components/schemas/ManufacturerItem'
        barcodes:
          type: array
          description: 'product barcodes'
          items:
            $ref: '#/components/schemas/BarcodeItem'
        size:
          type: object
          properties:
            length:
              type: integer
            width:
              type: integer
            height: 
              type: integer
            weight:
              type: integer
            volume:
              type: integer
            usefulVolume:
              type: integer 

    # manufacturers
    ManufacturerItem:
      type: object
      description: элемент списка производителей
      properties:
        id:
          type: integer 
          description: идентификатор производителя
          example: 13554
        name:
          type: string
          description: наименование производителя
          example: Производитель

    # barcodes
    BarcodeItem:
      type: object
      properties:
        id:
          type: integer
          description: 'barcode id'
          example: 224
        name:
          type: string
          description: 'barcode name'
          example: '0465578113632'
        type:
          type: integer
          description: 'barcode type'
          example: 1
     
    # suggestion
    SuggestionItem:
      type: object
      properties:
        id:
          type: integer
          description: 'suggestion key'
          example: 4
        val:
          type: string
          description: 'suggestion value'
        title:
          type: string
          description: 'suggestion title'
   
    ReceiptListItem:
      type: object
      description: 'receipt docs list item'
      properties:
        id:
          type: integer
          description: 'document id'
        number:
          type: string
          description: 'document number'
        date:
          type: string
          description: 'document date'
        doc_type:
          type: integer
          description: 'document type'
        
    ReceiptDocsist:
      type: object
      description: 'receipt docs list'
      properties:
        header:
          $ref: '#/components/schemas/ListHeader'
        data:
          type: array
          items:
            $ref: '#/components/schemas/ReceiptListItem'
      
  securitySchemes:
      ApiKeyAuth:        
        type: apiKey
        in: query      
        name: api_key 
      
      
        
